{
	"global": {
		"yes": "Yes",
		"no": "No",
		"unknownFields": "Unknown fields: {{fields}}",
		"fileNotFound": "File not found: {{file}}",
		"invalidJsonFile": "Invalid JSON file: {{file}}",
		"error": "Error",
		"ignored": "Ignored",
		"options": {
			"timeout": "Request timeout in milliseconds",
			"verbose": "Make the operation more talkative",
			"version": "Print version information and quit",
			"fields": "A list of fields to display in the table view",
			"availableFields": "List fields that can be displayed in the table view"
		}
	},
	"fields": {
		"task": {
			"id": "ID",
			"status": "Status",
			"runningTime": "Running time",
			"createdAt": "Created at",
			"updatedAt": "Updated at",
			"startedAt": "Started at",
			"params.sushiId": "SUSHI ID",
			"credentials.endpointId": "Endpoint ID",
			"credentials.endpoint.id": "Endpoint ID",
			"credentials.endpoint.vendor": "Endpoint",
			"credentials.institutionId": "Institution ID",
			"credentials.institution.id": "Institution ID",
			"credentials.institution.name": "Institution",
			"harvestId": "Harvest ID",
			"params.username": "Username",
			"reportType": "Report type",
			"params.index": "Index",
			"beginDate": "Begin date",
			"endDate": "End date",
			"index": "Index",
			"forceDownload": "Force download",
			"timeout": "Timeout",
			"errorCode": "Error code",
			"result.inserted": "Inserted",
			"result.updated": "Updated",
			"result.failed": "Failed",
			"result.errors": "Errors",
			"result.coveredPeriods": "Covered periods"
		}
	},
	"users": {
		"description": "Manage users <command>: get, roles, add",
		"noUsersFound": "No users found",
		"noUserFound": "No user found",
		"username": "Username",
		"fullName": "Full name",
		"email": "Email",
    "institution": "Institution",
		"assignedRoles": "Roles",
    "assignedSpaces": "Spaces",
		"reserved": "reserved",
		"userUpdated": "user [{{user}}] updated successfully",
		"roles": {
			"description": "Manage users roles <command>: add",
			"add": {
				"description": "Add role",
				"options": {
					"users": "User(s) name(s)",
					"roles": "Role(s) name(s)"
				},
				"noRolesSpecified": "No role(s) specified",
				"added": "role(s) [{{role}}] added to user [{{username}}]"
			}
		},
		"list": {
			"description": "List users",
			"options": {
				"json": "Print result(s) in json"
			}
		},
		"get": {
			"description": "Get one or more users",
			"options": {
				"users": "User(s) name(s)",
				"interactive":"Interactive mode",
				"json": "Print result(s) in json",
				"ndjson": "Print result(s) in ndjson",
        "csv": "Print result(s) in csv",
        "emailList": "Print list of emails",
        "correspondent": "Filter by correspondents: 'all', 'tech', 'doc' are allowed",
        "createdForm": "Filter by creation date at format YYYY-MM-DD",
        "noContact": "Filter by no contact",
				"fields": "Fields we want to retrieve separated by a comma (full_name,username by default)",
				"size": "Number of users to recover (default: 10)",
				"all": "Retrieve all users"
			},
			"checkboxLabel": "Users (Use arrow keys or begin typing to search, press <space> to select, press <enter> to submit)"
		},
    "check": {
			"description": "Check one or more users",
			"options": {
				"users": "User(s) name(s)",
				"interactive":"Interactive mode",
        "csv": "Print result(s) in csv",
				"json": "Print result(s) in json",
				"ndjson": "Print result(s) in ndjson"
			},
			"checkboxLabel": "Users (Use arrow keys or begin typing to search, press <space> to select, press <enter> to submit)"
		},
		"add": {
			"description": "Create user",
			"options": {
				"username": "Username (e.g. john.doe)",
				"password": "Password",
				"email": "Email address",
				"fullName":"Full name (e.g. John Doe)",
				"roles": "Role(s) name(s)",
				"enabled": "Enabled user (default: true)"
			},
			"created": "user [{{username}}] created or updated"
		}
	},
	"tasks": {
		"description": "Manage tasks <command>: get, list, cancel",
		"noTasks": "No tasks found",
		"notFound": "Task not found",
		"list": {
			"description": "List tasks",
			"options": {
				"size": "Maximum number of tasks to get",
				"id": "Filter tasks by ID (comma-separated list)",
				"harvestId": "Filter tasks by harvest ID (comma-separated list)",
				"status": "Filter tasks by status (comma-separated list)",
				"type": "Filter tasks by type (comma-separated list)",
				"sushiId": "Filter tasks by SUSHI ID (comma-separated list)",
				"institutionId": "Filter tasks by institution ID (comma-separated list)",
				"endpointId": "Filter tasks by SUSHI endpoint ID (comma-separated list)",
				"collapse": "Return only one task for each distinct value of the given field",
				"ndjson": "Print result(s) in ndjson",
				"json": "Print result(s) in json"
			}
		},
		"get": {
			"description": "Get one task",
			"id": "ID",
			"type": "Type",
			"status": "Status",
			"runningTime": "Running time",
			"createdAt": "Created at",
			"options": {
				"taskId": "Task identifier",
				"json": "Print result(s) as JSON"
			}
		},
		"cancel": {
			"description": "Cancel tasks",
			"options": {
				"id": "Filter tasks by ID (comma-separated list)",
				"harvestId": "Filter tasks by harvest ID (comma-separated list)",
				"status": "Filter tasks by status (comma-separated list)",
				"type": "Filter tasks by type (comma-separated list)",
				"sushiId": "Filter tasks by SUSHI ID (comma-separated list)",
				"institutionId": "Filter tasks by institution ID (comma-separated list)",
				"endpointId": "Filter tasks by SUSHI endpoint ID (comma-separated list)",
				"collapse": "Return only one task for each distinct value of the given field",
				"ndjson": "Print result(s) in ndjson",
				"json": "Print result(s) in json"
			},
			"pleaseSetAllFlag": "Please explicitly set --all flag to cancel all tasks",
			"nbCancelled": "{{n}} tasks have been cancelled",
			"nbFailed": "{{n}} tasks could not be cancelled"
		}
	},
	"generate": {
		"description": "Generate things <command>: sushi-matrix",
		"sushiMatrix": {
			"description": "Generate a summary of SUSHI items by institution and vendor"
		},
		"harvestMatrix": {
			"description": "Generate a summary of the latest harvest tasks for all SUSHI items",
			"options": {
				"package": "Add a column for the SUSHI Package",
				"harvestId": "Add a column for the harvest ID",
				"errors": "Add a column for harvest errors"
			}
		}
	},
	"queues": {
		"description": "Manage queues <command>: get, pause, resume",
		"get": {
			"description": "Get the status of one or all job queues",
			"options": {
				"queueName": "The name of the queue",
				"all": "Get all queues"
			},
			"missingChoice": "Please provide either a queue name or --all flag"
		},
		"pause": {
			"description": "Pause a job queue",
			"options": {
				"queueName": "The name of the queue that should be paused",
				"json": "Print result(s) in json"
			},
			"invalidResponse": "The API returned an invalid response",
			"paused": "The queue [{{name}}] is now paused",
			"notPaused": "The queue [{{name}}] was not paused"
		},
		"resume": {
			"description": "Resume a job queue",
			"options": {
				"queueName": "The name of the queue that should be resumed",
				"json": "Print result(s) in json"
			},
			"invalidResponse": "The API returned an invalid response",
			"resumed": "The queue [{{name}}] is now active",
			"notResumed": "The queue [{{name}}] was not resumed"
		}
	},
	"sushi": {
		"description": "Manage sushi <command>: delete, list, info, export, import, get-platforms",
		"noCredentialsFound": "No sushi credentials found",
		"noDataFound": "No sushi data found",
		"cannotReadFile": "Cannot read file {{file}}",
		"cannotParse": "Cannot parse {{file}}",
		"vendorCheckbox": "Sushi vendor (Use arrow keys or begin typing to search, press <space> to select, press <enter> to submit)",
		"noCredentialsFoundFor": "There are no sushi credentials for this institution ({{institution}})",
		"add": {
			"description": "Add new SUSHI credentials",
			"created": "SUSHI credentials have been created",
			"options": {
				"vendor": "SUSHI vendor",
				"requestorId": "Requestor ID",
				"customerId": "Customer ID",
				"apiKey": "API key",
				"comment": "Arbitrary comment",
				"package": "SUSHI package",
				"institutionId": "ID of the institution that owns the SUSHI credentials",
				"endpointId": "ID of the associated SUSHI endpoint",
				"params": "A list of query parameters formatted as [key=value]"
			}
		},
		"delete": {
			"description": "Delete sushi credentials",
			"removed": "Data removed successfully"
		},
		"getPlatforms": {
			"description": "Get the list of known SUSHI endpoints",
			"options": {
				"fields": "Fields that should be displayed in the table, separated by commas",
				"json": "Print result(s) in json",
				"ndjson": "Print result(s) in ndjson"
			},
			"fields": {
				"vendor": "Vendor",
				"sushiUrl": "Endpoint URL",
				"customerId": "Customer ID",
				"requestorId": "Requestor ID",
				"apiKey": "API key",
				"description": "Description",
				"technicalProvider": "Technical provider"
			}
		},
		"export": {
			"description": "Export sushi credentials",
			"options": {
				"institutions": "Institution name, case sensitive",
				"output": "Export directory",
				"ndjson": "Print result(s) in ndjson",
				"csv": "Print result(s) in csv",
				"interactive": "Interactive mode"
			},
			"exported": "Sushi exported successfully for institution [{{institution}}] ({{file}})",
			"id": "id",
			"vendor": "vendor",
			"sushiUrl": "sushiUrl",
			"requestorId": "requestorId",
			"customerId": "customerId",
			"apiKey": "apiKey",
			"comment": "comment",
			"params": "params",
			"package": "package",
			"insitutionId": "insitutionId",
			"updatedAt": "updatedAt",
			"createdAt": "createdAt"
		},
		"import": {
			"description": "Import sushi credentials",
			"options": {
				"filesPath": "Files path",
				"institution": "Institution name, case sensitive",
				"interactive": "Interactive mode",
				"overwrite": "Overwrite conflicts"
			},
			"cannotReadFile": "Cannot read file {{file}}",
			"imported": "Imported successfully",
			"itemCreated": "[Imported] {{vendor}}",
			"itemConflict": "[Conflict] {{vendor}}",
			"itemError": "[Error][{{vendor}}] {{message}}",
			"nbImported": "{{n}} imported",
			"nbConflicts": "{{n}} conflicts",
			"nbErrors": "{{n}} errors"
		},
		"info": {
			"description": "Get SUSHI informations",
			"options": {
				"institutions": "Institution(s) name(s), case sensitive",
				"json":"Print result(s) in json",
				"ndjson":"Print result(s) in ndjson",
				"csv":"Print result(s) in csv",
				"output": "Output path",
				"interactive": "Interactive mode",
				"all": "List all"
			},
			"institution": "Institution",
			"package": "Package",
			"vendor": "Vendor",
			"status": "Status",
			"message": "Message",
			"took": "Took (ms)",
			"endpoint": "Endpoint",
			"reports": "Reports"
		},
		"list": {
			"description": "List SUSHI credentials of institution",
			"options": {
				"size": "Maximum number of SUSHI items to fetch",
				"page": "The page to fetch",
				"sort": "Sort results by a specific field",
				"all": "List all",
				"query": "A string used to filter by institution or endpoint name",
				"json": "Print result(s) in json",
				"ndjson": "Print result(s) in ndjson",
				"interactive": "Interactive mode",
				"connection": "Only list items with a given connection state"
			},
			"fields": {
				"id": "SUSHI ID",
				"institution": { "name": "Institution" },
				"endpoint": { "vendor": "Endpoint" },
				"tags": "Tags",
				"customerId": "Customer ID",
				"requestorId": "Requestor ID",
				"apiKey": "API key",
				"comment": "Comment"
			}
		},
		"harvest": {
			"description": "Harvest SUSHI reports",
			"options": {
				"all": "Harvest all SUSHI items",
				"json": "Print result(s) in json",
				"ndjson": "Print result(s) in ndjson",
				"harvestId": "A specific ID to assign to the harvest batch.",
				"sushiId": "One or more SUSHI IDs. Harvest SUSHI items that have the given identifiers.",
				"institutionId": "One or more institution IDs. Harvest SUSHI items that belong to the given institutions.",
				"endpointId": "One or more endpoint IDs. Harvest SUSHI items that uses the given endpoints.",
				"allowFaulty": "Allow faulty or untested SUSHI endpoints to be harvested",
				"ignoreValidation": "Ignore report validation. Validation errors remains visible in task logs.",
				"from": "Beginning of the period to harvest",
				"to": "End of the period to harvest",
				"target": "Index where the data should be inserted",
				"reportType": "The report type that should be harvested (tr, dr, pr, ir)",
				"timeout": "Maximum task duration in seconds",
				"noCache": "Download the report again, even if it's been already downloaded",
				"interactive": "Interactive mode"
			},
			"harvestAllInstitutions": "Harvest for all institutions ?",
			"harvestAllEndpoints": "Harvest for all endpoints ?",
			"selectReportType": "Which report type should be harvested ?",
			"selectInstitutions": "Select institutions",
			"selectEndpoints": "Select endpoints",
			"selectSushiCredentials": "Select SUSHI credentials to harvest",
			"harvestId": "Harvest ID (optional)",
			"invalidDate": "Invalid date",
			"noFilter": "No filter specified.",
			"pleaseSetAllFlag": "Please explicitly set --all flag to harvest all SUSHI items",
			"xFailedTasks": "{{n}} harvest task(s) failed to be created",
			"xTasksCreated": "{{n}} harvest task(s) created",
			"runFollowingCommand": "Run the following command in order to follow the created tasks:",
			"sushiId": "SUSHI ID",
			"endpoint": "Endpoint",
			"taskId": "Task ID",
			"status": "Status",
			"message": "Message"
		},
		"fixEndpoints": {
			"description": "Fix SUSHI items with missing or incorrect endpoint association",
			"options": {
				"fromFiles": "Use export files instead of fetching SUSHI items from the API",
				"output": "Write resulting SUSHI items into a file instead of updating them using the API"
			},
			"sushiInvalidResponse": "Failed to fetch SUSHI credentials : invalid response",
			"endpointInvalidResponse": "Failed to fetch SUSHI endpoints : invalid response",
			"allSushiAssociated": "All SUSHI credentials are associated to an endpoint",
			"nbIssuesDetected": "{{total}} issues detected ({{unfixable}} require a manual intervention). Proceed ?",
			"unexistingEndpoint": "[{{label}}] is associated to an unexisting endpoint",
			"notAssociatedToEndpoint": "[{{label}}] is not associated to an endpoint",
			"selectEndpoint": "Select the enpoint to associate",
			"foundExactMatch": "An endpoint matching the vendor name has been found",
			"foundMultiple": "There are multiple endpoints matching the vendor name, please choose",
			"associatedToEndpoint": "[{{sushi}}] has been associated to endpoint [{{endpoint}}]",
			"createEndpoint": "[No results] Create an endpoint",
			"ignoreSushiItem": "[No results] Ignore this SUSHI item",
			"enterEndpointVendor": "Enter endpoint vendor name",
			"enterEndpointUrl": "Enter endpoint URL",
			"requireCustomerId": "Does it require a customer ID ?",
			"requireRequestorId": "Does it require a requestor ID ?",
			"requireApiKey": "Does it require an API key ?",
			"isSushiCompliant": "Is it SUSHI compliant ?",
			"validated": "Should this endpoint appear as validated ?",
			"endpointCreated": "Endpoint [{{label}}] has been created",
			"noMoreIssues": "There are no more issues to be fixed",
			"rememberChoice": "Use this endpoint for all credentials with this vendor name ?",
			"sushiUrl": "URL: {{url}}",
			"sushiParams": "Parameters: {{params}}"
		}
	},
	"spaces":	{
		"spaceCheckbox": "Space(s) (Use arrow keys or begin typing to search, press <space> to select, press <enter> to submit)",
		"spaceSelect": "Space (Use arrow keys, press <enter> to submit)",
		"description": "Manage spaces <command>: get, add, update, edit, delete",
		"notFound": "No space(s) found",
		"noSpacesSelected": "No space(s) selected",
		"notFoundSpace": "space [{{space}}] not found",
		"add": {
			"description": "Create new space",
			"options": {
				"name": "Space name, case sensitive",
				"color": "Space color",
				"description": "Space description",
				"initials": "Space initials",
				"interactive": "Interactive mode"
			},
			"spaceDescription": "Enter space description",
			"spaceInitials": "Enter space initials",
			"spaceColor": "Enter space color (ex: #9C27B0)",
			"created": "space [{{space}}] created successfully"
		},
		"update": {
			"description": "Update space",
			"options": {
				"name": "Space name, case sensitive",
				"newName": "New space name, case sensitive",
				"color": "Space color",
				"description": "Space description",
				"initials": "Space initials",
				"interactive": "Interactive mode"
			},
			"spaceDescription": "Enter space description",
			"spaceInitials": "Enter space initials",
			"spaceColor": "Enter space color (ex: #9C27B0)",
			"updated": "space [{{space}}] updated successfully"
		},
		"get": {
			"description": "Display information for one space",
			"id": "ID",
			"name": "Name",
			"descr": "Description",
			"initials": "Initials",
			"indexPatterns": "Index-Patterns",
			"color": "Color",
			"options": {
				"spaces": "Space(s) name(s)",
				"json": "Display data in json",
				"all": "Display all data in table",
				"interactive": "Interactive mode"
			}
		}
	},
	"roles": {
		"description": "Manage roles <command>: get, add, edit, delete",
		"roleCheckbox": "Roles(s) (Use arrow keys or begin typing to search, press <space> to select, press <enter> to submit)",
		"noRolesSelected": "No roles have been selected",
		"rolesNotFound": "No roles found",
		"noRolesSpecified": "No roles specified",
		"role": "Role",
		"indexes": "Indexes",
		"spaces": "Spaces",
		"space": "Space",
		"names": "Names",
		"privileges": "Privileges",
		"add": {
			"description": "Create new role",
			"options": {
				"role": "Role name, case sensitive",
				"indexPattern": "Index-pattern name (e.g: my-index, m-y-index*)",
				"space": "Space name, case sensitive",
				"privileges": "Privileges (all or read)",
				"readOnly": "Create role with read privileges and _read_only suffix"
			},
			"roleCreated": "role [{{roleName}}] created or updated"
		},
		"delete": {
			"description": "Delete role(s)",
			"options": {
				"roles": "Role(s) name(s)",
				"interactive": "Interactive mode"
			},
			"deleted": "role [{{role}}] deleted succefully"
		},
		"get": {
			"description": "Get and display role information",
			"options": {
				"roles": "Role(s) name(s)",
				"json": "Display data in json",
				"ndjson": "Display data in ndjson",
				"all": "Display all data in table",
				"interactive": "Interactive mode"
			}
		},
		"update": {
			"description": "Update role",
			"options": {
				"role": "Role name, case sensitive",
				"spaceRemove": "Name of space(s) to be deleted",
				"spaceAdd": "Name of space(s) to be added",
				"indexRemove": "Name of index to be deleted",
				"indexAdd": "Name of index to be added"
			}
		}
	},
	"reporting": {
		"description": "Manage reporting tasks <command>: list, info, delete",
		"noTasksFound": "No reporting task(s) found",
		"noTaskSelected": "No tasks selected",
		"deleted": "tasks [{{taskName}}] delete successfully",
		"deletedMessage": "tasks [{{id}}] {{result}}",
		"cannotGetDashboards": "no dashboards found for [{{space}}] space",
		"info": {
			"description": "Get report",
			"options": {
				"status": "Reporting status: ongoing, completed, error",
				"output": "Output path"
			},
			"dashboardNotFound": "Dashboard [{{dashboard}}] not found for reporting [{{reportingId}}] in space [{{space}}]",
			"noHistoryFor": "No history found for {{reportingId}}",
			"exported": "Data exported successfully at {{dest}}"
		},
		"list": {
			"description": "List all reporting tasks",
			"options": {
				"space": "Space(s) name, case sensitive",
				"frequencies": "Report frequency (weekly, monthly, quarterly, semi-annual, annual)",
				"json": "Print result(s) in json",
				"ndjson": "Print result(s) in ndjson"
			},
			"dashboardNotFound": "dashboard [{{dashboardId}}] does not found",
			"id": "ID",
			"space": "Space",
			"dashboard": "Dashboard",
			"frequency": "Frequency",
			"emails": "Emails",
			"print": "Print",
			"sentAt": "Sent at"
		},
		"delete": {
			"description": "Delete reporting task(s) on space",
			"options": {
				"noDashboard": "Delete reporting without dashboard",
				"ids": "Reporting IDs"
			},
			"deleted": "task [{{taskId}}] deleted successfully",
			"notFound": "task [{{taskId}}] not found"
		}
	},
	"transfer": {
		"description": "Transfer data from one ezMESURE instance to another",
		"options": {
			"to": "URL to the destination ezMESURE API",
			"overwrite": "Overwrite conflicts",
			"bulkSize": "Number of items that should be imported at once",
			"insecure": "Skip TLS certificates verification"
		},
		"authenticating": "Authenticating to {{url}}",
		"itemCreated": "[Imported][{{type}}] {{name}}",
		"itemConflict": "[Conflict][{{type}}] {{name}}",
		"itemError": "[Error][{{type}}][{{name}}] {{message}}",
		"nbImported": "{{n}} imported",
		"nbConflicts": "{{n}} conflicts",
		"nbErrors": "{{n}} errors"
	},
	"institution": {
		"notFound": "Institution [{{id}}] not found"
	},
	"institutions": {
		"description": "Manage institutions <command>: add, delete, refresh, get, export, import",
		"institutionsCheckbox": "Institutions (Use arrow keys or begin typing to search, press <space> to select, press <enter> to submit)",
		"institutionsSelect": "Institutions (Use arrow keys or begin typing to search, press <enter> to submit)",
		"institutionsNamesNotFound": "institution(s) [{{institutions}}] not found",
		"validated": "Validated",
		"notValidated": "Not validated",
		"doc": "Doc",
		"tech": "Tech",
    "docContact": "Doc contact",
		"techContact": "Tech contact",
		"name": "Name",
		"city": "City",
		"website": "Website",
		"domains": "Domains",
		"auto": "Auto",
		"validate": "Validate",
		"indexPrefix": "Index Prefix",
    "correspondent": "correspondent",
    "space": "Space",
    "roleInElastic": "Role in elastic",
    "spaceInElastic": "Space in elastic",
		"role": "Role",
		"contact": "Contact",
    "ezpaarse": "Ezpaarse",
    "ezmesure": "Ezmesure",
    "report": "Reporting",
		"refresh": {
			"description": "Refresh dynamic institution fields (contacts, number of ECs).",
			"refreshed": "Institutions are refreshed"
		},
		"add": {
			"description": "Create institution",
			"options": {
				"name": "Institution name",
				"index": "Index prefix",
				"space":"Base space name. Defaults to the index prefix.",
				"role":"Base role name. Defaults to the index prefix.",
				"ezpaarseSpace": "Create an ezPAARSE space",
				"publisherSpace": "Create a publisher space",
				"ezpaarse": "Automation ezPAARSE",
				"ezmesure": "Automation ezMESURE",
				"reporting": "Automation Reporting"
			},
			"getInstitutions": "Get institutions",
			"institutionCreated": "institution [{{name}}] created",
			"createInstitution": "Create institution",
			"importInstitution": "Iimport institution",
			"institutionValidated": "institution [{{name}}] validated",
			"validate": "Validate",
			"spaceCreated": "space [{{space}}] created",
			"createSpace": "Create space",
			"indexCreated": "index [{{index}}] created",
			"createIndex": "Create index",
			"indexPatternCreated": "index-pattern [{{indexPattern}}] created",
			"indexPatternSetAsDefault": "index-pattern [{{indexPattern}}] set as default",
			"createIndexPattern": "Create index-pattern",
			"roleCreated": "role [{{roleName}}] created or updated",
			"createRole": "Create role"
		},
		"export": {
			"description": "Export institution(s)",
			"options": {
				"all": "Export all institutions",
				"output": "Output path"
			},
			"exported": "institution [{{name}}] exported successfully",
			"noInstitutionsSelected": "No institutions selected",
			"cannotGetField": "institution [{{institutionName}}] cannot get [{{field}}] informations"
		},
		"get": {
			"description": "Get institution(s) informations",
			"options": {
				"institutions": "Institution(s) name, case sensitive",
        "noValidated": "Filter by not validated",
				"all": "Export all institutions",
				"json": "Print result(s) in json",
				"ndjson": "Print result(s) in ndjson",
				"interactive": "Interactive mode"
			},
			"validated": "Validated",
			"notValidated": "Not validated",
			"doc": "Doc contact",
			"tech": "Tech contact"
		},
    "check": {
      "description": "check institutions with rules",
      "options": {
				"institutions": "Institution(s) name, case sensitive",
				"json": "Print result(s) in json",
        "csv": "Print result(s) in csv",
				"ndjson": "Print result(s) in ndjson",
				"interactive": "Interactive mode"
			}
    },
		"import": {
			"description": "Import institution(s)",
			"sepecifyJSONFile": "Please sepecify JSON files path",
			"cannotReadFile": "Cannot read file {{file}}",
			"institutionAlreadyExists": "institution [{{name}}] already exists",
			"getInstitutions": "Get institutions",
			"institutionImported": "institution [{{name}}] imported",
			"createInstitution": "Import institution",
			"spaceImported": "space [{{space}}] imported",
			"importSpace": "Import space",
			"indexCreated": "index [{{index}}] imported",
			"createImported": "Import index",
			"indexPatternImported": "index-pattern [{{indexPattern}}] imported",
			"createIndexPattern": "Import index-pattern",
			"roleImported": "role imported (created or updated)",
			"importRole": "Import role"
		}
	},
	"counter4": {
		"description": "output an expanded JSON file or load a COUNTER 4 JR1 file into ezMESURE / KIBANA (bulk)",
		"options": {
			"files": "JR1 files",
			"package": "JR1 package",
			"bulk": "bulk index JR1 data",
			"depositor": "Index prefix name for publisher index",
			"ndjson": "only output newline delimited JSON file",
			"json": "Save in JSON file"
		},
		"incorrectJR1Type": "Incorrect JR1 type ({{type}})",
		"incorrectJR1Title": "Incorrect JR1 title ({{title}})",
		"incorrectJR1Date": "Incorrect JR1 date ({{startDate}}, {{endDate}})",
		"headerDoesNotFound": "Header does not found",
		"noReportsAvailable": "No reports available",
		"writing": "Writing {{file}} with {{count}} objects",
		"files": "Files",
		"file": "File",
		"isNotCSV": "{{file}} is not a CSV file",
		"fileDoesNotExists": "{{file}} does not exist",
		"index": "Index",
		"package": "Package",
		"took": "Took (ms)",
		"inserted": "Inserted",
		"updated": "Updated",
		"deleted": "Deleted",
		"errors": "Errors",
		"total": "Total",
		"filesProcessed": "{{files}} files processed",
		"mectrics": "Metrics"
	},
	"counter5": {
		"description": "counter5 <command>: reports",
		"report": {
			"description": "Get COUNTER5 reports for one or more institutions",
			"options": {
				"institutions": "Institution(s) name, case sensitive",
				"output": "Output path",
				"all": "Use all institutions",
				"merge": "Merge in one file"
			}
		},
		"noSushiReports": "institution [{{name}}] sushi reports not found",
		"exported": "SUSHI COUNTER5 reports available file: {{dest}} exported succesfully"
	},
	"config": {
		"description": "Manage config with a <command>: get, set, delete, view or edit",
		"delete": {
			"description": "Delete a key in the config",
			"options": {
				"key": "Config key",
				"global": "Delete key globally"
			}
		},
		"get": {
			"description": "Get the value of a key in the config",
			"options": {
				"key": "Config key"
			}
		},
		"set": {
			"description": "Set the value of a key in the config",
			"options": {
				"key": "Config key",
				"value": "Config value",
				"global": "Delete key globally"
			}
		},
		"view": {
			"description": "View current configuration",
			"options": {
				"global": "View global config",
				"local": "View local config"
			},
			"global": "Global",
			"local": "Local"
		},
		"edit": {
			"description": "Edit configuration",
			"options": {
				"editor": "The editor command to use. Defaults to EDITOR environment variable if set, or 'vi' on Posix, or 'notepad' on Windows",
				"intractive": "Intractive mode",
				"global": "Edit global config"
			},
			"baseUrl": "ezmESURE base API URL",
			"token": "Authentication token",
			"timeout": "Request timeout in milliseconds",
			"whatDoYouWant": "What do you want to set ?"
		}
	},
	"cluster": {
		"description": "Manage cluster <command>: settings, flush, shard",
		"invalidReponse": "Invalid elasticsearch response body",
		"shard": {
			"description": "Manage shards <command>: allocation",
			"allocation": {
				"description": "Enable or disable allocation for specific kinds of elasticsearch shards",
				"options": {
					"type": "Can be: all, primaries, new_primaries, none, null"
				},
				"invalidValue": "Invalid value {{type}}, valid values are: {{values}}",
				"failedToApply": "Failed to apply cluster settings",
				"applied": "Cluster settings applied"
			}
		},
		"flush": {
			"description": "Flush all data streams and indices in the cluster",
			"flushFailed": "Failed to flush cluster",
			"shardsFailed": "Some shards failed to flush",
			"total": "Total",
			"sauccessful": "Successful",
			"failed": "Failed"
		},
		"settings": {
			"description": "Show cluster settings",
			"failed": "Failed to get cluster settings"
		}
	},
	"dashboard": {
		"description": "Manage dashboard with a <command>: import, export, copy",
		"dashboardsCheckbox": "Dashboard(s) (Use arrow keys or begin typing to search, press <space> to select, press <enter> to submit)",
		"noDashaboardsSelected": "No dashaboard(s) selected",
		"notFound": "dashboard [{{dashboardId}}] not found",
		"spaceNotFound": "space [{{spaceName}}] not found",
		"export": {
			"description": "Export dashboard",
			"options": {
				"space": "Space name, case sensitive",
				"dashboard": "Dashboard ID",
				"output": "Output path",
				"interactive": "Interactive mode"
			},
			"exported": "Dashboard [{{title}}] exported successfully ({{path}})"
		},
		"import": {
			"description": "Import dashboard(s)",
			"options": {
				"space":"Space name, case sensitive",
				"indexPattern": "Index pattern name",
				"overwrite": "Overwrite conflicts",
				"files": "Files path",
				"interactive": "Interactive mode"
			},
			"indexPattern": "Index pattern",
			"noIndexPattern": "No index pattern typed",
			"noDashboardData": "No dashboard(s) data found",
			"cannotReadFile": "Cannot read file {{file}}",
			"cannotParse": "Cannot parse {{file}}",
			"error": "[Error#{{status}}]: dashbord does not imported",
			"conflict": "There are conflicts, use the --overwrite option to force the rewriting of conflicts",
			"imported": "Dashboard imported [{{title}}] successfully",
			"noFiles": "No files specified"
		},
		"bulkImport": {
			"description": "Import dashboard(s) in a list of spaces",
			"options": {
				"spaces":"Space names, case sensitive. If not provided, will import in all institution spaces with a given suffix.",
				"ignoreMissingSpaces": "Ignore missing spaces",
				"ignoreConflicts": "Ignore object conflicts",
				"onConflict": "Behavior when an import contains conflicts",
				"overwrite": "Overwrite conflicts",
				"files": "Files path. If not provided, will fetch dashboards from the remote reference repository."
			},
			"selectDashboards": "Select dashboards to import",
			"selectSpaceType": "Select space type, or enter a custom space suffix",
			"selectIndexPattern": "Select index pattern",
			"selectTemplateDir": "Select template directory",
			"noDashboardsSelected": "No dashboard(s) selected",
			"noIndexPatternCreateOne": "No index pattern found. Please enter one.",
			"space": "Space: {{space}}",
			"spaceNotFound": "Space not found",
			"ezpaarseSpace": "ezPAARSE space",
			"ezcounterSpace": "ezCOUNTER space",
			"noFiles": "No files specified",
			"nbImported": "{{count}} objects have been imported",
			"nbAffectedSpaces": "{{count}} spaces have been affected",
			"nbConflicts": "{{count}} objects generated conflicts",
			"nbMissingSpaces": "{{count}} spaces were not found",
			"nbErrors": "{{count}} errors"
		},
		"copy": {
			"description": "Copy a dashboard from one space to another",
			"options": {
				"source": "Space name, case sensitive",
				"dashboard": "Dashboard ID",
				"target": "Space name, case sensitive",
				"indexPattern": "Index pattern name",
				"force": "Override existing objects",
				"interactive": "Interactive mode"
			},
			"indexPatternSelect": "Index-pattern (Use arrow key, press <enter> to submit)",
			"indexPatternInput": "Index-pattern (Press <enter> to submit)",
			"error": "[Error#{{statusCode}}] {{message}}",
			"dashboardIsRequired": "\"dashboard\" is required",
			"copied": "Dashboard [{{source}}] copied to [{{target}}]",
			"indexDoesNotExists": "index and index-pattern [{{index}}] does not exists, we create them for you"
		}
	},
	"login": {
		"description": "Log in to ezMESURE",
		"options": {
			"username": "Username",
			"password": "Password",
			"passwordStdin": "Take the password from stdin"
		},
		"username": "Username",
		"password": "Password",
		"warning": "WARNING! Using --password via the CLI is insecure. Use --password-stdin.",
		"loginFailed": "user [{{username}}] login failed",
		"loggedIn": "user [{{username}}] logged in successfully"
	},
	"indexPattern": {
		"description": "Manage index-pattern with a <command> : add",
		"add": {
			"description": "Create index-pattern",
			"options": {
				"json": "Print result(s) in json",
				"space": "Space name, case sensitive",
				"title": "Index-pattern name",
				"timeFieldName": "Time field name (default: datetime)"
			},
			"created": "index-pattern [{{title}}] created in space [{{space}}] with ID [{{id}}]"
		}
	},
	"indices": {
		"description": "Manage indices with a <command> : add",
		"add": {
			"description": "Create index",
			"options": {
				"index": "Indice name"
			},
			"created": "index [{{index}}] created successfully"
		}
	},
	"ping": {
		"description": "Lets you know that both ezMESURE and ElasticSearch instances are available and that you are properly configured to use both instances"
	},
	"kibanaRequest": {
		"description": "Make a request to the Kibana API through the ezMESURE API",
		"options": {
			"method": "The HTTP method to use",
			"apiPath": "The Kibana API path",
			"timeout": "Request timeout",
			"data": "Request body"
		}
	},
	"migrate": {
		"description": "Commands to migrate from Legacy to Reloaded",

		"export": {
			"description": "Export depositors, roles and users from ezMESURE's Elastic",
			"options": {
				"out": "Directory where to output files (Default: current datetime)",
				"bulkSize": "Number of items that should be exported at once"
			},

			"scroll": {
				"got": "  Got scroll for {{type}}...",
				"heartbeat": "  Still scrolling..."
			},
			"going": "i Exporting {{type}}...",
			"file": "  Opening new file for {{type}}...",
			"ok": "✔️ {{count}} {{type}} exported to \"{{out}}\"",
			"dataOk": "✔️ Data exported to \"{{out}}\"",
			"noRoles": "! Can't get members: No roles found for {{institution}}",
			"noMembers": "! No members found for {{institution}}"
		},

		"apply": {
			"description": "Apply migration to convert exported files into ezMESURE Reloaded import files",
			"options": {
				"out": "The directory where to output files (Default: inputfolder + '_migrated')",
				"file": "File path to cache repo and spaces answers"
			},

			"institutions": {
				"going": "i Migrating institutions...",
				"ok": "✔️ {{count}} Institutions migrated !"
			},
			"users": {
				"going": "i Migrating users...",
				"ok": "✔️ {{count}} Users migrated !"
			},
			"sushi": {
				"going": "i Migrating sushi endpoints...",
				"ok": "✔️ {{count}} Sushi endpoints migrated !"
			},

			"skip": "Skip",
			"create": "Create",
			"answersOk": "✔️ Answers saved to \"{{out}}\"",
			"dataOk": "✔️ Data migrated to \"{{out}}\"",

			"askRepoOrSpaceType": {
				"prompt": "Type of {{type}} of {{id}} from {{institution}} ?\n{{ids}}",
				"idList": "All {{type}}(s): {{ids}}"
			},
			"askMoreRepos": {
				"ask": "Spaces without matching repos found for {{institution}}, do you wish to create missing repos ?\n{{ids}}",
				"prompt": "Patterns to create ?\n{{ids}}",
				"spacesList": "Current spaces(s): {{ids}}",
				"patternList": "Current patterns(s): {{ids}}"
			}
		}
	},
	"import": {
		"description": "Import institutions, sushis endpoints and users into ezMESURE",
		"options": {
			"bulkSize": "Number of items that should be imported at once",
			"insecure": "Skip TLS certificates verification"
		}
	}
}