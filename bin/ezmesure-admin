#!/usr/bin/env node

/* eslint-disable no-console */
/* eslint-disable max-len */

const program = require('commander');
const pkg = require('../package.json');

const libSpaces = require('./cmds/spaces');
const objects = require('./cmds/objects');
const dashboard = require('./cmds/dashboard');
const usersCmd = require('./cmds/users');
const rolesCmd = require('./cmds/roles');
const reportingCmd = require('./cmds/reporting');
const counterCmd = require('./cmds/counter');
const sushiCmd = require('./cmds/sushi');


program.on('command:*', () => {
  console.error(`Invalid command: ${program.args.join(' ')}\nSee --help for a list of available commands.`);
  process.exit(1);
});

program
  .version(pkg.version)
  .command('spaces [space]')
  .option('-a, --all', 'display all data')
  .option('-j, --json', 'display data in JSON format')
  .description('List all KIBANA spaces or [space] space attributes')
  .action((space, opts) => libSpaces.getSpaces(space, opts));

program
  .command('space-add <space>')
  .option('-c, --color <color>', 'color of space')
  .option('-d, --desc <description>', 'description of space')
  .option('-i, --initials <initials>', 'initials of space')
  .option('-t, --template <template>', 'default template to use')
  .description('Add a KIBANA space with default attributes')
  .action((space, opts) => libSpaces.addSpaces(space, opts));

program
  .command('space-del <spaces...>')
  .description('Delete a KIBANA space')
  .action(spaces => libSpaces.delSpaces(spaces));

program
  .command('objects-find <type>')
  .description('Find KIBANA objects (objects: visualization, dashboard, search, index-pattern, config, timelion-sheet)')
  .option('-s, --space <space>', 'target space')
  .option('-t, --title <title>', 'title of object, is a key word (ex: univ-lorraine)')
  .option('-j, --json', 'display data in JSON format')
  .action((type, opts) => objects.findObjects(type, opts));

program
  .command('dashboard-export <dashboardId>')
  .description('Export dashboard by Id')
  .option('-s, --space <space>', 'name of target space')
  .action((dashboardId, opts) => dashboard.exportDashboard(dashboardId, opts));

program
  .command('dashboard-move-in-space <space> [dashboards...]')
  .description('Move dashboard by Id(s) in another space')
  .option('-n, --new', 'create new space')
  .option('-t, --title <title>', 'list dashboard(s) by title contains key word (ex: univ-lorraine)')
  .action((space, dashboards, opts) => dashboard.importDashboardInSpace(space, dashboards, opts));

program
  .command('users [users...]')
  .description('Get all users list or a specific user')
  .option('-j, --json', 'display data in JSON format')
  .action((user, opts) => usersCmd.getUsers(user, opts));

program
  .command('user-roles')
  .description('Manage role(s) to user(s)')
  .action(() => usersCmd.userRoles());

program
  .command('roles [roles...]')
  .description('Get all roles list or a specific role')
  .option('-j, --json', 'display data in JSON format')
  .action((role, opts) => rolesCmd.getRoles(role, opts));

program
  .command('add-role <role> [usernames...]')
  .description('Add role to user(s)')
  .action((role, usernames) => rolesCmd.manageRole(role, usernames, true));

program
  .command('del-role <role> [usernames...]')
  .description('Delete role to user(s)')
  .action((role, usernames) => rolesCmd.manageRole(role, usernames, false));

program
  .command('create-role <role>')
  .description('Create role')
  .action(role => rolesCmd.createRole(role));

program
  .command('reporting <emails...>')
  .description('Send reporting to target emails')
  .option('-s, --space <space>', 'Name of space')
  .action((emails, opts) => reportingCmd.report(emails, opts));

program
  .command('counter4 <JR1file>')
  .description('output an expanded JSON file or load a COUNTER 4 JR1 file into ezMESURE / KIBANA (bluk)')
  .option('-b, --bulk ', 'bulk index JR1 data')
  .option('-c, --counter-package <JR1package>', 'JR1 package (do not try to guess from file name)')
  .option('-d, --depositor <depositor>', 'index prefix name for publisher index', 'local')
  .option('-n, --ndjson ', 'only output newline delimited JSON file')
  .action((JR1file, opts) => counterCmd.counter4(JR1file, opts));

program
  .command('counter5 <counter5file>')
  .description('output an expanded JSON file or load a COUNTER 5 Report file into ezMESURE / KIBANA (bulk)')
  .option('-b, --bulk ', 'bulk index COUNTER 5 data')
  .option('-c, --counter-package <package>', 'package (do not try to guess from file name)')
  .option('-d, --depositor <depositor>', 'index prefix name for publisher index', 'local')
  .option('-n, --ndjson ', 'only output newline delimited JSON file')
  .action((counter5file, opts) => counterCmd.counter5(counter5file, opts));

program
  .command('sushi5 <sushiFile>')
  .description('download the JSON COUNTER 5 Report from sushi endpoint or load index data into ezMESURE / KIBANA (bulk)')
  .option('-s, --report-file <reportFilePrefix>', 'Save sushi report with file prefix', 'sushi')
  .option('-b, --bulk', 'bulk index COUNTER 5 data')
  .option('-d, --depositor <depositor>', 'index prefix name for publisher index', 'local')
  .action((sushiFile, opts) => sushiCmd.sushi5(sushiFile, opts));


program.parse(process.argv);
